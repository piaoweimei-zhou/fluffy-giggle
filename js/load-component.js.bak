// /js/load-component.js

// Function to load HTML components into a specified container
function loadComponent(containerId, filePath) {
    fetch(filePath)
        .then(response => {
            if (!response.ok) {
                throw new Error(`加载失败: ${response.status}`);
            }
            return response.text();
        })
        .then(data => {
            const container = document.getElementById(containerId);
            if (container) {
                container.innerHTML = data;
                // After loading navbar, highlight the current page link
                if (containerId === 'navbar-container') {
                    highlightCurrentPage();
                }
            }
        })
        .catch(error => {
            console.error(`Error loading component for ${containerId}:`, error);
            const container = document.getElementById(containerId);
            if (container) {
                container.innerHTML = '<p>组件加载失败</p>';
            }
        });
}

// Function to highlight the current page's navigation link
function highlightCurrentPage() {
    // Remove trailing slash for consistent comparison, handle root path special
    const currentPagePath = window.location.pathname.replace(/\/$/, '') || '/index.html'; 
    const navLinks = document.querySelectorAll('.nav-links a');
    
    navLinks.forEach(link => {
        const linkHref = link.getAttribute('href').replace(/\/$/, '') || '/index.html'; 
        
        // Exact match for most pages
        if (currentPagePath === linkHref) {
            link.classList.add('active');
        } 
        // For sub-paths, e.g., /categories/video-tools/product-a.html should highlight /categories.html and /categories/video-tools/index.html
        // And /categories/video-tools/index.html should highlight /categories.html
        else if (linkHref !== '/' && currentPagePath.startsWith(linkHref + '/')) {
            link.classList.add('active');
        }
    });
}

// Function to load the common head content from components/head.html
// This will append meta/link/etc. elements directly to the document's head
function loadHeadContent() {
    fetch('/components/head.html')
        .then(response => response.text())
        .then(data => {
            const parser = new DOMParser();
            const doc = parser.parseFromString(data, 'text/html');
            // Append children from the fetched head content to the actual document head
            Array.from(doc.head.children).forEach(element => {
                // Check if element already exists to prevent duplicates (e.g., if title is set explicitly)
                if (!document.head.querySelector(`[${element.tagName.toLowerCase()}="${element.outerHTML}"]`) && 
                    !document.head.querySelector(`${element.tagName.toLowerCase()}[href="${element.href}"]`)) {
                    document.head.appendChild(element);
                }
            });
            // Update the title specifically if not already set or if it's generic
            if (!document.title || document.title.includes("飘哥工具箱")) { // Avoid overwriting specific page titles
                const titleElement = doc.querySelector('title');
                if (titleElement) {
                    document.title = titleElement.textContent; // Use generic title from component
                }
            }
        })
        .catch(error => console.error('Error loading head component:', error));
}

// Call loadHeadContent immediately at script execution time for every page
loadHeadContent(); 